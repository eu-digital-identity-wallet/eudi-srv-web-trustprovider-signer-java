/*
 Copyright 2024 European Commission

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

package eu.europa.ec.eudi.signer.csc.payload;

/**
 * Body for request of signatures/timestamp for generating timestamp tokens for
 * hashes.
 * From section 11.10 of the CSC API V_1.0.4.0 spec
 */
public class CSCSignaturesTimestampRequest {

    // REQUIRED
    // The Base64-encoded hash value to be time stamped.
    // The remote service SHALL use this value to encode the value of MessageImprint
    // .hashedMessage as defined in RFC 3161 [2].
    private String hash;

    // REQUIRED
    // The OID of the algorithm used to calculate the hash value.
    // The remote service SHALL use this value to encode the value of
    // MessageImprint.hashAlgorithm as defined in RFC 3161 [2].
    private String hashAlgo;

    // OPTIONAL
    // A large random number with a high probability that it is generated by the
    // signature
    // application only once. The value SHALL be represented as hex-encoded string.
    private String nonce;

    // OPTIONAL
    // The clientData as defined in the Input parameter table in section 8.3.2.
    private String clientData;

    public String getHash() {
        return hash;
    }

    public void setHash(String hash) {
        this.hash = hash;
    }

    public String getHashAlgo() {
        return hashAlgo;
    }

    public void setHashAlgo(String hashAlgo) {
        this.hashAlgo = hashAlgo;
    }

    public String getNonce() {
        return nonce;
    }

    public void setNonce(String nonce) {
        this.nonce = nonce;
    }

    public String getClientData() {
        return clientData;
    }

    public void setClientData(String clientData) {
        this.clientData = clientData;
    }
}
